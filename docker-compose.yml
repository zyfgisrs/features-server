services:
  # 1. The PostGIS Database Service
  db:
    image: postgis/postgis:16-3.4  # Use a specific PostGIS image
    container_name: my_postgis_db
    environment:
      # These credentials MUST match what you will use in the Java app
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=postgres
    ports:
      # Expose the database port to your host machine for easy access with a DB tool like DBeaver
      - "5432:5432"
    volumes:
      # Use a Docker volume to persist database data even if the container is removed
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 2. The Java Application Service
  java-app:
    build: .  # Build the image using the Dockerfile in the current directory
    container_name: my_java_app
    depends_on:
      db:
        condition: service_healthy # Wait until the database is ready before starting
    environment:
      # IMPORTANT: Override the database URL from your application.yml
      # We use the service name 'db' as the hostname. Docker will handle the networking.
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres?currentSchema=public
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=123456
      # Add any other environment variables your app needs
    restart: on-failure

  # 3. The Nginx Reverse Proxy Service
  nginx:
    image: nginx:1.25-alpine # Use a lightweight Nginx image
    container_name: my_nginx_proxy
    ports:
      # Map port 80 of the host to port 80 in the container. This is your app's main entry point.
      - "80:80"
    volumes:
      # Mount our custom nginx.conf into the container
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - java-app # Wait for the Java app to be running
    restart: unless-stopped

# Define the named volume for persisting database data
volumes:
  postgres-data:
    driver: local